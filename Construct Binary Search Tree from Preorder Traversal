Time Complexity O(n)
Space Complexity O(n)

import java.util.*;
class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode() {}
     TreeNode(int val) { this.val = val; }
     TreeNode(int val, TreeNode left, TreeNode right) {
         this.val = val;
         this.left = left;
         this.right = right;
    }
 }
public class Solution 
{
	public static TreeNode constructTree(int arr[],int size)
	{
		Stack<TreeNode> st = new Stack<TreeNode>();
		TreeNode root = new TreeNode(arr[0]);
		st.push(root);
		for(int i=1;i<arr.length;i++)
		{
			TreeNode temp=null;
			while(!st.isEmpty() && arr[i]>st.peek().val)
			{
				temp = st.pop();
			}
			if(temp!=null)
			{
			     temp.right = new TreeNode(arr[i]);
			     st.push(temp.right);
			}
			else
			{
				temp = st.peek();
				temp.left = new TreeNode(arr[i]);
			    st.push(temp.left);
			}
		}
		return root;
	}
	void printInorder(TreeNode node) {
        if (node == null) {
            return;
        }
        printInorder(node.left);
        System.out.print(node.val + " ");
        printInorder(node.right);
    }
	public static void main(String[] args) 
	{
		Solution tree = new Solution();
        int pre[] = new int[]{10, 5, 1, 7, 40, 50};
        int size = pre.length;
        TreeNode root = tree.constructTree(pre, size);
        System.out.println("Inorder traversal of the constructed tree is ");
        tree.printInorder(root);
		
	}
}

Time Complexity O(n^2)
Space Complexity O(1);

public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
     }
  }
 
class Solution {

    public TreeNode bstFromPreorderUtil(int[] preorder,int start,int end) {
        if(start>end)
            return null;
        
        TreeNode root =  new TreeNode(preorder[start]);
        int tr = start+1;
        while(tr<preorder.length && preorder[tr]<=preorder[start])
            tr++;
        
        root.left = bstFromPreorderUtil(preorder,start+1,tr-1);
        root.right = bstFromPreorderUtil(preorder,tr,end);
        return root;
    }
    public TreeNode bstFromPreorder(int[] preorder) {
        return bstFromPreorderUtil(preorder,0,preorder.length-1) ;
    }
}
