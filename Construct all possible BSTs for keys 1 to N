Construct all possible BSTs for keys 1 to N
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BST 
{
	//this code is for construct
    static ArrayList<Node> constructtree(int start,int end)
	{
		ArrayList<Node> list = new ArrayList<Node>();
		if(start>end)
		{
			list.add(null);
			return list;
		}
		for(int i=start;i<=end;i++)
		{
			ArrayList<Node> leftsubtree = constructtree(start,i-1);
			ArrayList<Node> rightsubtree = constructtree(i+1,end);
			for(int j =0;j<leftsubtree.size();j++)
			{
				Node left = leftsubtree.get(j);
				for(int k =0;k<rightsubtree.size();k++)
				{
					Node right = rightsubtree.get(k);
					Node node = new Node(i);
					node.left=left;
					node.right=right;
					list.add(node);
				}
			}
		}
		return list;
	}
	static void preorder(Node root)  
	{  
       if (root != null)  
       {  
          System.out.print(root.data+" ") ; 
          preorder(root.left);  
	      preorder(root.right);  
	   }  
	}
	//this code is to count BST's
	/*
	public int counttrees(int n)
	{
		int T[] = new int[n+1];
		T[0]=1;
		T[1]=1;
		for(int i=2;i<=n;i++)
		{
			for(int j=0;j<i;++j)
			{
				T[i]+=T[j]*T[i-j-1];
			}
		}
		return T[n];
	}
	 public int numTrees(int n) 
	 {
        return counttrees(n);
     }*/
	public static void main(String[] args) 
	{ 
		ArrayList<Node> totalTreesFrom1toN = constructtree(1, 3); 
        System.out.println("Preorder traversals of all constructed BSTs are "); 
        for (int i = 0; i < totalTreesFrom1toN.size(); i++)  
        {  
            preorder(totalTreesFrom1toN.get(i));  
            System.out.println(); 
        }
	}
}
