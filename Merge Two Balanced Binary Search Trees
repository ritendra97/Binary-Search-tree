Merge Two Balanced Binary Search Trees
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
	}
}
public class BST 
{
	static void merge(Node root1,Node root2)
	{
		Stack<Node> s1 = new Stack<>();
		Stack<Node> s2 = new Stack<>();
		Node curr1 = root1;
		Node curr2 = root2;
		if(root1==null)
		{
			inorder(root2);
			return;
		}
		if(root2==null)
		{
			inorder(root1);
			return;
		}
		while(!s1.isEmpty()||!s2.isEmpty()||curr1!=null||curr2!=null)
		{
			if(curr1!=null || curr2!=null)
			{
				if(curr1!=null)
				{
					s1.push(curr1);
					curr1=curr1.left;
				}
				if(curr2!=null)
				{
					s2.push(curr2);
					curr2=curr2.left;
				}
			}
			else
			{
				if(s1.isEmpty())
				{
					while(!s2.isEmpty())
					{
						curr2 = s2.pop();
						inorder(curr2);
					}
					return;
				}
				if(s2.isEmpty())
				{
					while(!s1.isEmpty())
					{
						curr1 = s1.pop();
						inorder(curr1);
					}
					return;
				}
				curr1 = s1.pop();
				curr2 = s2.pop();
				if(curr1.data<curr2.data)
				{
					System.out.println(curr1.data);
					curr1=curr1.right;
					s2.push(curr2);
					curr2=null;
				}
				else
				{
					System.out.println(curr2.data);
					curr2=curr2.right;
					s1.push(curr1);
					curr1=null;
				}
			}
		}
	}
	static void inorder(Node root) 
    { 
        if (root != null) 
        { 
            inorder(root.left); 
            System.out.print(root.data + " "); 
            inorder(root.right); 
        } 
    }
    public static void main(String[] args)
    {
    	Node root1 = null, root2 = null; 

        root1 = new Node(3) ; 
        root1.left = new Node(1); 
        root1.right = new Node(5); 
     
        root2 = new Node(4) ; 
        root2.left = new Node(2); 
        root2.right = new Node(6); 
        merge(root1, root2); 
    }
}
