//Inorder Predecessor and Successor in Binary Search Tree


class Node {

	int data;
	Node left;
	Node right;

	public Node(int data, Node left, Node right) {
		this.data = data;
		this.left = null;
		this.right = null;
	}

	public Node(int data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

public class BinaryTree {

	static int predecessor;
	static int successor;

	public static void predecessorSuccessor(Node node, int val) {
		if (node != null) {

			if (node.data == val) {
				if (node.left != null) {
					Node t = node.left;
					while (t.right != null)
						t = t.right;
					predecessor = t.data;
				}

				if (node.right != null) {
					Node t = node.right;
					while (t.left != null)
						t = t.left;
					successor = t.data;
				}

			} else if (node.data > val) {
				successor = node.data;
				predecessorSuccessor(node.left, val);
			} else if (node.data < val) {
				predecessor = node.data;
				predecessorSuccessor(node.right, val);
			}

		}
	}

	public static void print(Node node) {
		if (node == null)
			return;

		System.out.println(node.data);
		print(node.left);

		print(node.right);
	}

	public static void main(String[] args) {

		Node root = new Node(20);
		root.left = new Node(10);
		root.right = new Node(30);
		root.left.left = new Node(5);
		root.left.left.right = new Node(7);
		root.left.right = new Node(15);
		root.right.left = new Node(25);
		root.right.right = new Node(35);
		root.left.right.left = new Node(13);
		root.left.right.right = new Node(18);

		predecessorSuccessor(root, 10);
		System.out.println("Inorder Successor of 10 is : " + successor + " and predecessor is : " + predecessor);
	}
}
